#!markdown

### Using statement lambda to create a print method for List0fstring

#!csharp

using static System.Console;

// statement lambda
Action<List<string>> print = list => WriteLine(string.Join(',', list));

// state objects
List<string> names = new(new List<string> { "Name1", "Name2", "Name3"});

// output
print(names)

#!markdown

### Http request example

#!csharp

using System.Net.Http;

var dataUrl = "https://data.cityofchicago.org/resource/4i42-qv3h.json";

var data = await new HttpClient().GetStringAsync(dataUrl); 

data

#!markdown

### Handling input from the user

#!csharp

var inputStockGroup = await GetInputAsync("Enter stock group");
WriteLine(inputStockGroup);

var price = await GetInputAsync("Enter stock price");
var inputStockPrice = Convert.ToDecimal(price);
WriteLine(inputStockPrice);

#!markdown

### Single Responsibility Principle (SRP)

#!csharp

using System.IO;
using System.Diagnostics;
using static System.Console;

// journal entry responsibility
public class Journal
{
    private readonly List<string> entries = new();
    private static int entryId = 1;

    public int AddEntry(string entry)
    {
        entries.Add($"{entryId++}: {entry}");
        return entryId;
    }

    public override string ToString()
    {
        return string.Join(Environment.NewLine, entries);
    }
}

// journal persistence responsibility 
public class Persistence
{
    public void WriteToFile(Journal journal, string filename, bool overwrite = false)
    {
        if (overwrite || !File.Exists(filename))
            File.WriteAllText(filename, journal.ToString());
    }
}

Journal journal = new();
journal.AddEntry("I drank mocha this morning");
journal.AddEntry("I drove kids to school this morning");
WriteLine(journal);

// if on osx set permission for vscode to write file: sudo chown -R $(whoami) /Users/$(whoami)/.vscode
Persistence persist = new();
var path = "/Users/devmaster/Desktop/Source/dotnet/";
var filename = Path.Combine(path, "Journal.txt");
persist.WriteToFile(journal, filename, true);

#!markdown

### Open Close Principle (OCP)

#!csharp

using static System.Console;

public enum Color { Red, Green, Blue, Black, White }
public enum Size { Small, Medium, Large, Huge }
public enum Operator { AND, OR }

// product model responsibility
public class Product
{
    public string Name;
    public Color Color;
    public Size Size;

    public Product(string name, Color color, Size size)
    {
        Name = name ?? throw new ArgumentNullException(nameof(name));
        Color = color;
        Size = size;
    }
}

// filter specification abstruction
public interface IFilterSpecification<T>
{
    bool IsSatisfiedByItem(T t);
}
// filter interface abstruction
public interface IFilter<T>
{
    IEnumerable<T> Filter(IEnumerable<T> items, IFilterSpecification<T> specs);
}

// color filter specification implementation
public class FilterByColorSpec : IFilterSpecification<Product>
{
    private Color color;
    public FilterByColorSpec(Color color)
    {
        this.color = color;
    }

    public bool IsSatisfiedByItem(Product p) => p.Color == color;

}
// size filter specification implementation
public class FilterBySizeSpec : IFilterSpecification<Product>
{
    private Size size;
    public FilterBySizeSpec(Size size)
    {
        this.size = size;
    }

    public bool IsSatisfiedByItem(Product p) => p.Size == size;
}

// combination filter abstruction
public class CombinationFilterSpecification<T> : IFilterSpecification<T>
{
    private IFilterSpecification<T> first, second;
    private Operator op;
    public CombinationFilterSpecification(IFilterSpecification<T> first, IFilterSpecification<T> second, Operator op)
    {
        this.first = first ?? throw new ArgumentNullException(nameof(first));
        this.second = second ?? throw new ArgumentNullException(nameof(second));
        this.op = op;
    }
      
    public bool IsSatisfiedByItem(T t)
    {

        return op == Operator.AND ? 
            first.IsSatisfiedByItem(t) && second.IsSatisfiedByItem(t) :
            first.IsSatisfiedByItem(t) || second.IsSatisfiedByItem(t);
    }
}

// filter implementation
public class ProductFilter : IFilter<Product>
{
    public IEnumerable<Product> Filter(IEnumerable<Product> products, IFilterSpecification<Product> spec)
    {
        return products
            .Where(item => spec.IsSatisfiedByItem(item))
            .ToList();
    }
}

// Main()
var apple = new Product("Apple", Color.Green, Size.Small);
var tree = new Product("Tree", Color.Green, Size.Large);
var house = new Product("House", Color.White, Size.Huge);
var truck = new Product("Truck", Color.White, Size.Huge);

Product[] products = { apple, tree, house, truck };
var filter = new ProductFilter();

// find products with green color
WriteLine("Green products:");
foreach
    (var item in filter.Filter(products, 
        new FilterByColorSpec(Color.Green)
    ))
{
    WriteLine($" - {item.Name} is {item.Color}");
}

// find products that are white and huge
WriteLine("Huge white products:");
foreach
    (var item in filter.Filter(products,
        new CombinationFilterSpecification<Product>(
            new FilterByColorSpec(Color.White),
            new FilterBySizeSpec(Size.Huge),
            Operator.AND
    )))
{
    WriteLine($" - {item.Name} is {item.Color}");
}

#!markdown

### Dependecy Invesion Principle
high-level code should not DIRECTLY depend on low-level code implementation.<br/>
an abstruction should be used to provide integration api to the low-level code

#!csharp

using static System.Console;

public enum Relationship { ParentOf, ChildOf }

public class Person { public string Name; }

public interface IRelationshipService
{
    void AddRelationship(Person p1, Relationship r, Person p2);
    IEnumerable<Person> FindRelations(Relationship r, string name);
}

// low-level code
public class Relationships : IRelationshipService
{
    private List<(Person, Relationship, Person)> relations = new();

    public override string ToString() => string.Join(Environment.NewLine, relations);

    public void AddRelationship(Person p1, Relationship r, Person p2)
    {
        relations.Add((p1, r, p2));
        WriteLine("Added relationship...");
        WriteLine($"{p1.Name}->{r}->{p2.Name}\n");
    }

    public IEnumerable<Person> FindRelations(Relationship r, string name)
    {
        WriteLine($"Searching...for {r} {name}");
        return 
            relations
                .Where(x => x.Item3.Name == name &&
                            x.Item2 == r)
                .Select(x => x.Item1)
                .ToList();
    }
}

IRelationshipService svc = new Relationships();

var p = new Person { Name = "John" };
var c1 = new Person { Name = "Chris" };
var c2 = new Person { Name = "Mary" };

svc.AddRelationship(c1, Relationship.ChildOf, p);
svc.AddRelationship(c2, Relationship.ChildOf, p);

foreach(var p in svc.FindRelations(Relationship.ChildOf, "John"))
{
    WriteLine($"John has a child called {p.Name}");
}
