#!markdown

### Using statement lambda to create a print method for List0fstring

#!csharp

using static System.Console;

// statement lambda
Action<List<string>> print = list => WriteLine(string.Join(',', list));

// state objects
List<string> names = new(new List<string> { "Name1", "Name2", "Name3"});

// output
print(names)

#!markdown

### Http request example

#!csharp

using System.Net.Http;

var dataUrl = "https://data.cityofchicago.org/resource/4i42-qv3h.json";

var data = await new HttpClient().GetStringAsync(dataUrl); 

data

#!markdown

### Handling input from the user

#!csharp

var inputStockGroup = await GetInputAsync("Enter stock group");
WriteLine(inputStockGroup);

var price = await GetInputAsync("Enter stock price");
var inputStockPrice = Convert.ToDecimal(price);
WriteLine(inputStockPrice);

#!markdown

### Single Responsibility Principle (SRP)

#!csharp

using System.IO;
using System.Diagnostics;
using static System.Console;

public class Journal
{
    // journal entry responsibility
    private readonly List<string> entries = new();
    private static int entryId = 1;

    public int AddEntry(string entry)
    {
        entries.Add($"{entryId++}: {entry}");
        return entryId;
    }

    public override string ToString()
    {
        return string.Join(Environment.NewLine, entries);
    }
}

// journal printing responsibility
Action<Journal> print = journal => WriteLine(string.Join(Environment.NewLine, journal));

public class Persistence
{
    // journal persistence 
    public void WriteToFile(Journal journal, string filename, bool overwrite = false)
    {
        if (overwrite || !File.Exists(filename))
            File.WriteAllText(filename, journal.ToString());
    }
}

Journal journal = new();
journal.AddEntry("I drank mocha this morning");
journal.AddEntry("I drove kids to school this morning");
print(journal);

// if on osx set permission for vscode to write file: sudo chown -R $(whoami) /Users/$(whoami)/.vscode
Persistence persist = new();
var path = "/Users/devmaster/Desktop/Source/dotnet/";
var filename = Path.Combine(path, "Journal.txt");
persist.WriteToFile(journal, filename, true);

#!markdown

### Open Close Principle (OCP)

#!csharp

using static System.Console;

public enum Color { Red, Green, Blue, Black, White }
public enum Size { Small, Medium, Large, XL }

public class Product
{
    // product model responsibility
    public string Name;
    public Color Color;
    public Size Size;

    public Product(string name, Color color, Size size)
    {
        Name = name ?? throw new ArgumentNullException(nameof(name));
        Color = color;
        Size = size;
    }
}

public interface IFilterSpecification<T>
{
    bool IsSatisfiedByItem(T t);
}
public interface IFilter<T>
{
    IEnumerable<T> Filter(IEnumerable<T> items, IFilterSpecification<T> specs);
}

public class FilterByColorSpec : IFilterSpecification<Product>
{
    private Color color;
    public FilterByColorSpec(Color color)
    {
        this.color = color;
    }

    public bool IsSatisfiedByItem(Product p)
    {
        return p.Color == color;
    }
}

public class BetterFilter : IFilter<Product>
{
    public IEnumerable<Product> Filter(IEnumerable<Product> products, IFilterSpecification<Product> spec)
    {
        return products
            .Where(item => spec.IsSatisfiedByItem(item))
            .ToList();
    }
}

var apple = new Product("Apple", Color.Green, Size.Small);
var tree = new Product("Tree", Color.Green, Size.Large);
var house = new Product("House", Color.White, Size.XL);

Product[] products = { apple, tree, house };
var filter = new BetterFilter();

WriteLine("Green products:");
foreach(var item in filter.Filter(products, new FilterByColorSpec(Color.Green)))
    WriteLine($" - {item.Name} is {item.Color}");
